"""
Module de suivi et d'affichage de la progression du brainstorm.
Affiche une barre de progression et des indicateurs visuels pour suivre l'avancement.
"""

import sys
import time
from typing import Optional
from .config import config

class ProgressTracker:
    """Gestionnaire de progression pour le brainstorm."""
    
    def __init__(self, total_cycles: int, top_ideas_count: int = 3):
        self.total_cycles = total_cycles
        self.top_ideas_count = top_ideas_count
        self.current_cycle = 0
        self.current_step = 0
        self.current_phase = ""
        self.current_idea = 0
        
        # Calcul du nombre total d'√©tapes
        # Cycles: 6 √©tapes par cycle (cr√©atif, critique, d√©fense, r√©plique, r√©vision, score)
        # Synth√®se: 1 √©tape
        # Id√©es: 4 √©tapes par id√©e (plan, critique, d√©fense, r√©vision)
        # Export: 1 √©tape
        self.steps_per_cycle = 6
        self.total_steps = (
            self.total_cycles * self.steps_per_cycle +  # Cycles
            1 +  # Synth√®se
            self.top_ideas_count * 4 +  # Traitement des id√©es
            1  # Export
        )
        self.completed_steps = 0
        
        # Suivi des tokens et co√ªts
        self.total_input_tokens = 0
        self.total_output_tokens = 0
        self.total_cost = 0.0
        self.session_costs = []  # Liste des co√ªts par appel
        
        # Emojis et labels pour chaque √©tape
        self.cycle_steps = [
            ("üé®", "Cr√©atif"),
            ("üîç", "Critique"), 
            ("üõ°Ô∏è", "D√©fense"),
            ("üí¨", "R√©plique"),
            ("‚úèÔ∏è", "R√©vision"),
            ("üìä", "Score")
        ]
        
        self.idea_steps = [
            ("üìã", "Plan"),
            ("üîç", "Critique"),
            ("üõ°Ô∏è", "D√©fense"),
            ("‚úèÔ∏è", "R√©vision")
        ]
    
    def _get_progress_bar(self, width: int = 40) -> str:
        """G√©n√®re une barre de progression."""
        filled = int(width * self.completed_steps / self.total_steps)
        bar = "‚ñà" * filled + "‚ñë" * (width - filled)
        percentage = (self.completed_steps / self.total_steps) * 100
        return f"[{bar}] {percentage:.1f}%"
    
    def add_api_call(self, model: str, input_tokens: int, output_tokens: int):
        """Ajoute un appel API au suivi des co√ªts."""
        self.total_input_tokens += input_tokens
        self.total_output_tokens += output_tokens
        
        # Calcul du co√ªt de cet appel
        call_cost = config.calculate_cost(model, input_tokens, output_tokens)
        self.total_cost += call_cost
        self.session_costs.append({
            "model": model,
            "input_tokens": input_tokens,
            "output_tokens": output_tokens,
            "cost": call_cost
        })
    
    def _get_cost_info(self) -> str:
        """G√©n√®re l'information de co√ªt."""
        if self.total_cost == 0:
            return ""
        
        total_tokens = self.total_input_tokens + self.total_output_tokens
        return f"üí∞ {total_tokens:,} tokens | ${self.total_cost:.4f}"
    
    def _print_status(self, message: str = ""):
        """Affiche le statut actuel avec la barre de progression."""
        if not config.get("display.show_progress", True):
            return
            
        # Effacer la ligne pr√©c√©dente
        print("\r" + " " * 120 + "\r", end="")
        
        progress_bar = self._get_progress_bar()
        phase_info = f"Phase: {self.current_phase}"
        cost_info = self._get_cost_info()
        
        # Construction de la ligne de status
        parts = [progress_bar, phase_info]
        if cost_info:
            parts.append(cost_info)
        if message:
            parts.append(message)
        
        status_line = " | ".join(parts)
        print(f"\r{status_line}", end="", flush=True)
    
    def start_brainstorm(self):
        """D√©marre le suivi de progression."""
        print(f"\n{config.get_emoji('start')} === D√âBUT DU BRAINSTORM ===")
        print(f"üìä Progression totale: {self.total_steps} √©tapes")
        print(f"üîÑ Cycles pr√©vus: {self.total_cycles}")
        print(f"üí° Id√©es √† traiter: {self.top_ideas_count}")
        print()
        self.current_phase = "Initialisation"
        self._print_status("D√©marrage...")
        time.sleep(0.5)
    
    def start_cycle(self, cycle_num: int):
        """D√©marre un nouveau cycle."""
        self.current_cycle = cycle_num
        self.current_step = 0
        self.current_phase = f"Cycle {cycle_num}/{self.total_cycles}"
        print(f"\n\n{config.get_emoji('cycle')} === CYCLE {cycle_num} ===")
        self._print_status()
    
    def start_cycle_step(self, step_num: int):
        """D√©marre une √©tape du cycle."""
        self.current_step = step_num
        emoji, label = self.cycle_steps[step_num]
        self.current_phase = f"Cycle {self.current_cycle}/{self.total_cycles} - {label}"
        self._print_status(f"{emoji} {label}...")
    
    def complete_cycle_step(self, step_num: int):
        """Compl√®te une √©tape du cycle."""
        self.completed_steps += 1
        emoji, label = self.cycle_steps[step_num]
        self._print_status(f"{emoji} {label} ‚úì")
        time.sleep(0.2)
    
    def start_synthesis(self):
        """D√©marre la phase de synth√®se."""
        self.current_phase = "Synth√®se finale"
        print(f"\n\n{config.get_emoji('synthese')} === SYNTH√àSE FINALE ===")
        self._print_status("üîÑ G√©n√©ration de la synth√®se...")
    
    def complete_synthesis(self):
        """Compl√®te la synth√®se."""
        self.completed_steps += 1
        self._print_status("‚úÖ Synth√®se termin√©e")
        time.sleep(0.2)
    
    def start_idea_processing(self, total_ideas: int):
        """D√©marre le traitement des id√©es."""
        self.top_ideas_count = total_ideas
        self.current_idea = 0
        self.current_phase = f"Traitement des id√©es (0/{total_ideas})"
        print(f"\n\n{config.get_emoji('application')} === TRAITEMENT DES ID√âES ===")
        self._print_status()
    
    def start_idea(self, idea_num: int, idea_text: str):
        """D√©marre le traitement d'une id√©e."""
        self.current_idea = idea_num
        self.current_phase = f"Id√©e {idea_num}/{self.top_ideas_count}"
        idea_preview = idea_text[:50] + "..." if len(idea_text) > 50 else idea_text
        print(f"\nüí° Traitement de l'id√©e {idea_num}: {idea_preview}")
        self._print_status()
    
    def start_idea_step(self, step_num: int):
        """D√©marre une √©tape du traitement d'id√©e."""
        emoji, label = self.idea_steps[step_num]
        self.current_phase = f"Id√©e {self.current_idea}/{self.top_ideas_count} - {label}"
        self._print_status(f"{emoji} {label}...")
    
    def complete_idea_step(self, step_num: int):
        """Compl√®te une √©tape du traitement d'id√©e."""
        self.completed_steps += 1
        emoji, label = self.idea_steps[step_num]
        self._print_status(f"{emoji} {label} ‚úì")
        time.sleep(0.2)
    
    def start_export(self):
        """D√©marre l'export."""
        self.current_phase = "Export"
        self._print_status("üíæ Export des r√©sultats...")
    
    def complete_export(self):
        """Compl√®te l'export."""
        self.completed_steps += 1
        self._print_status("üíæ Export termin√© ‚úì")
        time.sleep(0.2)
    
    def finish(self):
        """Termine le suivi de progression."""
        print(f"\n\n{config.get_emoji('success')} === BRAINSTORM TERMIN√â ===")
        print(f"‚úÖ Toutes les √©tapes ont √©t√© compl√©t√©es avec succ√®s!")
        print(f"üìä {self.completed_steps}/{self.total_steps} √©tapes accomplies")
        
        # Affichage du r√©sum√© des co√ªts
        if self.total_cost > 0:
            print(f"\nüí∞ === R√âSUM√â DES CO√õTS ===")
            print(f"üìù Total d'appels API: {len(self.session_costs)}")
            print(f"üî§ Tokens d'entr√©e: {self.total_input_tokens:,}")
            print(f"üî§ Tokens de sortie: {self.total_output_tokens:,}")
            print(f"üî§ Tokens totaux: {self.total_input_tokens + self.total_output_tokens:,}")
            print(f"üíµ Co√ªt total: ${self.total_cost:.4f}")
            
            # Affichage par mod√®le
            model_costs = {}
            for call in self.session_costs:
                model = call["model"]
                if model not in model_costs:
                    model_costs[model] = {"calls": 0, "cost": 0.0}
                model_costs[model]["calls"] += 1
                model_costs[model]["cost"] += call["cost"]
            
            if len(model_costs) > 1:
                print(f"\nüìä R√©partition par mod√®le:")
                for model, stats in model_costs.items():
                    print(f"   ‚Ä¢ {model}: {stats['calls']} appels - ${stats['cost']:.4f}")
    
    def get_cost_summary(self) -> dict:
        """Retourne un r√©sum√© des co√ªts."""
        return {
            "total_calls": len(self.session_costs),
            "total_input_tokens": self.total_input_tokens,
            "total_output_tokens": self.total_output_tokens,
            "total_tokens": self.total_input_tokens + self.total_output_tokens,
            "total_cost": self.total_cost,
            "session_costs": self.session_costs
        }
    
    def update_total_ideas(self, count: int):
        """Met √† jour le nombre total d'id√©es (utile si extrait diff√©remment)."""
        old_idea_steps = self.top_ideas_count * 4
        new_idea_steps = count * 4
        self.total_steps = self.total_steps - old_idea_steps + new_idea_steps
        self.top_ideas_count = count 