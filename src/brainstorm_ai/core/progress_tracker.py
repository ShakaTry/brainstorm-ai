"""
Module de suivi de progression du brainstorming.
Affiche la progression en temps r√©el et g√®re les statistiques.
"""

import logging
import sys
from datetime import datetime
from typing import Any, Dict, List, Optional

from ..core.config import config

logger = logging.getLogger(__name__)


class ProgressTracker:
    """Gestionnaire de suivi de progression pour le brainstorming."""

    def __init__(self, total_cycles: int, top_ideas_count: int):
        """
        Initialise le tracker de progression.

        Args:
            total_cycles: Nombre total de cycles pr√©vus
            top_ideas_count: Nombre d'id√©es top √† traiter
        """
        self.total_cycles = total_cycles
        self.top_ideas_count = top_ideas_count

        # Calcul du nombre total d'√©tapes
        steps_per_cycle = 5  # cr√©ation, critique, d√©fense, r√©plique, r√©vision
        self.total_steps = (total_cycles * steps_per_cycle) + 1 + (top_ideas_count * 4)

        self.completed_steps = 0
        self.current_stage = ""
        self.start_time = datetime.now()
        self.session_costs: List[Dict[str, Any]] = []

        # Stats globales
        self.total_input_tokens = 0
        self.total_output_tokens = 0
        self.total_cost = 0.0

        # Handler sp√©cial pour la console
        self.console_handler = logging.StreamHandler(sys.stdout)
        self.console_handler.setLevel(logging.INFO)
        formatter = logging.Formatter("%(message)s")
        self.console_handler.setFormatter(formatter)

    def _log_console(self, message: str, level: int = logging.INFO):
        """Affiche un message dans la console et le log."""
        # Log normal
        logger.log(level, message)

        # Affichage console direct pour l'utilisateur
        record = logger.makeRecord(logger.name, level, "", 0, message, (), None)
        self.console_handler.emit(record)

    def update_stage(self, stage: str):
        """Met √† jour l'√©tape actuelle."""
        self.current_stage = stage
        self.completed_steps += 1
        self._display_progress()

    def add_cost(self, model: str, input_tokens: int, output_tokens: int, cost: float):
        """
        Ajoute des statistiques de co√ªt pour un appel API.

        Args:
            model: Le mod√®le utilis√©
            input_tokens: Nombre de tokens d'entr√©e
            output_tokens: Nombre de tokens de sortie
            cost: Co√ªt en dollars
        """
        self.session_costs.append(
            {
                "model": model,
                "input_tokens": input_tokens,
                "output_tokens": output_tokens,
                "cost": cost,
                "timestamp": datetime.now(),
            }
        )

        self.total_input_tokens += input_tokens
        self.total_output_tokens += output_tokens
        self.total_cost += cost

        logger.debug(f"Co√ªt ajout√©: {model} - ${cost:.4f} ({input_tokens}+{output_tokens} tokens)")

    def _display_progress(self):
        """Affiche la barre de progression."""
        progress = self.completed_steps / self.total_steps
        bar_length = 50
        filled = int(bar_length * progress)
        bar = "‚ñà" * filled + "‚ñë" * (bar_length - filled)

        # Efface la ligne pr√©c√©dente
        sys.stdout.write("\r" + " " * 120 + "\r")
        sys.stdout.flush()

        # Temps √©coul√©
        elapsed = (datetime.now() - self.start_time).total_seconds()
        if elapsed > 0 and progress > 0:
            estimated_total = elapsed / progress
            remaining = estimated_total - elapsed
            time_str = f" | Temps restant: {int(remaining)}s"
        else:
            time_str = ""

        status_line = f"[{bar}] {progress * 100:.1f}% | {self.current_stage}{time_str}"
        sys.stdout.write(f"\r{status_line}")
        sys.stdout.flush()

    def start_brainstorm(self):
        """Marque le d√©but du brainstorming."""
        self._log_console(f"\n{config.get_emoji('start')} === D√âBUT DU BRAINSTORM ===")
        self._log_console(f"üìä Progression totale: {self.total_steps} √©tapes")
        self._log_console(f"üîÑ Cycles pr√©vus: {self.total_cycles}")
        self._log_console(f"üí° Id√©es √† traiter: {self.top_ideas_count}")
        self._log_console("")
        logger.info("Brainstorm d√©marr√©")

    def start_cycle(self, cycle_num: int):
        """
        Marque le d√©but d'un cycle.

        Args:
            cycle_num: Num√©ro du cycle (1-based)
        """
        self._log_console(f"\n\n{config.get_emoji('cycle')} === CYCLE {cycle_num} ===")
        logger.info(f"D√©but du cycle {cycle_num}")

    def log_step(self, step_name: str, content: str):
        """
        Log une √©tape avec son contenu.

        Args:
            step_name: Nom de l'√©tape
            content: Contenu √† logger
        """
        # Log complet dans le fichier
        logger.info(f"{step_name}: {content[:500]}...")

        # Version tronqu√©e pour la progression
        self.update_stage(step_name)

    def start_cycle_step(self, step_num: int):
        """
        Marque le d√©but d'une √©tape de cycle.

        Args:
            step_num: Num√©ro de l'√©tape (0-based)
        """
        step_names = ["Cr√©atif", "Critique", "D√©fense", "R√©plique", "R√©vision", "Score"]
        step_name = step_names[step_num] if step_num < len(step_names) else f"√âtape {step_num}"
        self.update_stage(f"Cycle - {step_name}")
        logger.debug(f"D√©but de l'√©tape {step_num}: {step_name}")

    def complete_cycle_step(self, step_num: int):
        """
        Marque la fin d'une √©tape de cycle.

        Args:
            step_num: Num√©ro de l'√©tape (0-based)
        """
        step_names = ["Cr√©atif", "Critique", "D√©fense", "R√©plique", "R√©vision", "Score"]
        step_name = step_names[step_num] if step_num < len(step_names) else f"√âtape {step_num}"
        logger.debug(f"Fin de l'√©tape {step_num}: {step_name}")

    def start_idea_step(self, step_num: int):
        """
        Marque le d√©but d'une √©tape de traitement d'id√©e.

        Args:
            step_num: Num√©ro de l'√©tape (0-based)
        """
        step_names = ["Plan", "Critique Plan", "D√©fense Plan", "R√©vision Plan"]
        step_name = step_names[step_num] if step_num < len(step_names) else f"√âtape {step_num}"
        self.update_stage(f"Id√©e - {step_name}")
        logger.debug(f"D√©but de l'√©tape id√©e {step_num}: {step_name}")

    def complete_idea_step(self, step_num: int):
        """
        Marque la fin d'une √©tape de traitement d'id√©e.

        Args:
            step_num: Num√©ro de l'√©tape (0-based)
        """
        step_names = ["Plan", "Critique Plan", "D√©fense Plan", "R√©vision Plan"]
        step_name = step_names[step_num] if step_num < len(step_names) else f"√âtape {step_num}"
        logger.debug(f"Fin de l'√©tape id√©e {step_num}: {step_name}")

    def start_idea(self, idea_num: int, idea_text: str):
        """
        Marque le d√©but du traitement d'une id√©e.

        Args:
            idea_num: Num√©ro de l'id√©e
            idea_text: Texte de l'id√©e
        """
        idea_preview = idea_text[:50] + "..." if len(idea_text) > 50 else idea_text
        self._log_console(f"\nüí° Traitement de l'id√©e {idea_num}: {idea_preview}")
        logger.info(f"Traitement de l'id√©e {idea_num}")

    def complete_synthesis(self):
        """Marque la fin de la synth√®se."""
        logger.info("Synth√®se termin√©e")

    def start_synthesis(self):
        """Marque le d√©but de la synth√®se."""
        self._log_console(f"\n\n{config.get_emoji('synthese')} === SYNTH√àSE FINALE ===")
        logger.info("D√©but de la synth√®se finale")

    def log_synthesis(self, content: str):
        """Log le r√©sultat de la synth√®se."""
        logger.info(f"Synth√®se: {content}")
        self.update_stage("Synth√®se finale")

    def start_application(self):
        """Marque le d√©but du traitement des id√©es."""
        self._log_console(f"\n\n{config.get_emoji('application')} === TRAITEMENT DES ID√âES ===")
        logger.info("D√©but du traitement des id√©es s√©lectionn√©es")

    def start_idea_processing(self, total_ideas: int):
        """
        Marque le d√©but du traitement des id√©es.

        Args:
            total_ideas: Nombre total d'id√©es √† traiter
        """
        self._log_console(f"\n\n{config.get_emoji('application')} === TRAITEMENT DES ID√âES ===")
        self._log_console(f"üí° {total_ideas} id√©e(s) s√©lectionn√©e(s) √† d√©velopper")
        logger.info(f"D√©but du traitement de {total_ideas} id√©es")

    def log_idea_step(self, step_name: str, content: str):
        """
        Log une √©tape du traitement d'id√©e.

        Args:
            step_name: Nom de l'√©tape
            content: Contenu √† logger
        """
        logger.info(f"{step_name}: {content[:500]}...")
        self.update_stage(f"Id√©e - {step_name}")

    def get_cost_by_model(self) -> Dict[str, Dict[str, Any]]:
        """Retourne les statistiques de co√ªt group√©es par mod√®le."""
        model_stats = {}

        for cost_entry in self.session_costs:
            model = cost_entry["model"]
            if model not in model_stats:
                model_stats[model] = {
                    "calls": 0,
                    "input_tokens": 0,
                    "output_tokens": 0,
                    "cost": 0.0,
                }

            model_stats[model]["calls"] += 1
            model_stats[model]["input_tokens"] += cost_entry["input_tokens"]
            model_stats[model]["output_tokens"] += cost_entry["output_tokens"]
            model_stats[model]["cost"] += cost_entry["cost"]

        return model_stats

    def finish_brainstorm(self):
        """Marque la fin du brainstorming et affiche le r√©sum√©."""
        self._log_console(f"\n\n{config.get_emoji('success')} === BRAINSTORM TERMIN√â ===")
        self._log_console("‚úÖ Toutes les √©tapes ont √©t√© compl√©t√©es avec succ√®s!")
        self._log_console(f"üìä {self.completed_steps}/{self.total_steps} √©tapes accomplies")

        # Affichage des co√ªts
        if config.show_token_usage:
            self._log_console("\nüí∞ === R√âSUM√â DES CO√õTS ===")
            self._log_console(f"üìù Total d'appels API: {len(self.session_costs)}")
            self._log_console(f"üî§ Tokens d'entr√©e: {self.total_input_tokens:,}")
            self._log_console(f"üî§ Tokens de sortie: {self.total_output_tokens:,}")
            self._log_console(
                f"üî§ Tokens totaux: {self.total_input_tokens + self.total_output_tokens:,}"
            )
            self._log_console(f"üíµ Co√ªt total: ${self.total_cost:.4f}")

            # R√©partition par mod√®le si plusieurs mod√®les utilis√©s
            model_stats = self.get_cost_by_model()
            if len(model_stats) > 1:
                self._log_console("\nüìä R√©partition par mod√®le:")
                for model, stats in model_stats.items():
                    self._log_console(
                        f"   ‚Ä¢ {model}: {stats['calls']} appels - ${stats['cost']:.4f}"
                    )

        # Log final
        logger.info(f"Brainstorm termin√© - Co√ªt total: ${self.total_cost:.4f}")

    def update_total_ideas(self, count: int):
        """
        Met √† jour le nombre total d'id√©es √† traiter.

        Args:
            count: Nouveau nombre d'id√©es
        """
        self.top_ideas_count = count
        logger.debug(f"Nombre d'id√©es mis √† jour: {count}")

    def start_export(self):
        """Marque le d√©but de l'export."""
        self.update_stage("Export")
        logger.info("D√©but de l'export des r√©sultats")

    def complete_export(self):
        """Marque la fin de l'export."""
        logger.info("Export termin√©")

    def finish(self):
        """Alias pour finish_brainstorm()."""
        self.finish_brainstorm()

    def export_session_costs(self) -> List[Dict[str, Any]]:
        """Exporte les donn√©es de co√ªt de la session."""
        return self.session_costs.copy()


# Instance globale (sera cr√©√©e par le loop_manager)
tracker: Optional[ProgressTracker] = None
