# R√®gles de d√©veloppement pour Brainstorm AI
# ==========================================
# Projet : Syst√®me de brainstorming collaboratif avec agents IA sp√©cialis√©s

## üéØ R√®gles g√©n√©rales
- **Langue** : Toujours r√©pondre en fran√ßais
- **Architecture** : Respecter la structure src/brainstorm_ai/ (agents/, core/, cli/)
- **Tests** : Maintenir une couverture de tests pour les fonctionnalit√©s critiques
- **Configuration** : Centraliser les param√®tres dans config/ (config.yaml, prompts.yaml)
- **S√©curit√©** : Ne jamais exposer de cl√©s API dans le code

## üîß Commandes et outils

### ‚úÖ Privil√©gier GitHub CLI (gh) dans Cursor
**Probl√®me identifi√©** : Les commandes `git` standard causent parfois des suspensions dans l'IDE Cursor

**Utiliser en priorit√© :**
```bash
# V√©rifications repository
gh repo view --json name,pushedAt,defaultBranchRef
gh api repos/OWNER/REPO/commits --jq '.[0:3]'
gh run list --limit 5

# Navigation
gh browse --no-browser
```

**√âviter dans Cursor :**
```bash
git log --oneline    # Peut rester en suspend
git status           # Parfois bloqu√©
```

### üìù Git workflow standard
```bash
# Workflow basique
git add .
git commit -m "Description claire des changements"
git push origin main
```

## üß† Sp√©cificit√©s Brainstorm AI

### Architecture des agents
- **creative.py** : G√©n√©ration d'id√©es innovantes
- **critic.py** : Analyse critique constructive  
- **revision.py** : Am√©lioration et reformulation
- **score.py** : √âvaluation quantitative
- **synthesis.py** : Synth√®se et s√©lection des meilleures id√©es
- **application.py** : Plans de mise en ≈ìuvre

### Fichiers importants
- **main.py** / **run.py** : Points d'entr√©e
- **config/config.yaml** : Configuration syst√®me (mod√®les, cycles, etc.)
- **config/prompts.yaml** : Templates des prompts pour chaque agent
- **src/brainstorm_ai/core/loop_manager.py** : Orchestration du brainstorming
- **src/brainstorm_ai/core/gpt.py** : Interface OpenAI

### ‚ö†Ô∏è Pr√©cautions importantes
- **Tests co√ªteux** : √âviter d'ex√©cuter `main.py` √† r√©p√©tition (consomme des tokens OpenAI)
- **Cl√©s API** : S'assurer que `OPENAI_API_KEY` est d√©finie mais non expos√©e
- **Prompts** : Tester les modifications de prompts avec parcimonie

## ‚úÖ Checklist avant commit

### Fonctionnalit√©
- [ ] Code test√© et fonctionnel
- [ ] Pas de cl√©s API hardcod√©es
- [ ] Configuration YAML valide
- [ ] Imports r√©solus correctement

### Qualit√©
- [ ] Messages de commit descriptifs
- [ ] Documentation mise √† jour si n√©cessaire
- [ ] Tests unitaires passent

### D√©ploiement
- [ ] V√©rification avec `gh` si possible
- [ ] Push vers la bonne branche

## üöÄ Bonnes pratiques de d√©veloppement

### Messages de commit
- **Fonctionnalit√©** : "‚ú® Ajout [description]"
- **Correction** : "üêõ Fix [probl√®me r√©solu]"
- **Am√©lioration** : "‚ö° Am√©lioration [composant]"
- **Documentation** : "üìñ Docs [section mise √† jour]"
- **Tests** : "üß™ Tests [couverture ajout√©e]"
- **Configuration** : "‚öôÔ∏è Config [param√®tre modifi√©]"

### Structure de d√©veloppement
1. **Comprendre** le besoin/probl√®me
2. **Analyser** l'architecture existante  
3. **Impl√©menter** la solution
4. **Tester** les modifications
5. **Documenter** si n√©cessaire
6. **Commiter** et **pusher**

## üé® Style et conventions

### Code Python
- Suivre PEP 8 autant que possible
- Noms de variables explicites
- Docstrings pour les fonctions importantes
- Gestion d'erreurs appropri√©e

### Organisation
- Agents dans `src/brainstorm_ai/agents/`
- Logique core dans `src/brainstorm_ai/core/`
- Tests dans `tests/` avec structure miroir
- Configuration dans `config/`
- Documentation dans `docs/`

---

*Ces r√®gles sont √©volutives et peuvent √™tre adapt√©es selon les besoins du projet.* 