# R√®gles de d√©veloppement pour Brainstorm AI
# ==========================================
# Projet : Syst√®me de brainstorming collaboratif avec agents IA sp√©cialis√©s

## üéØ R√®gles g√©n√©rales
- **Langue** : Toujours r√©pondre en fran√ßais
- **Architecture** : Respecter la structure src/brainstorm_ai/ (agents/, core/, cli/)
- **Qualit√© code** : Utiliser ruff pour linting et formatage
- **Configuration** : Centraliser les param√®tres dans config/ (config.yaml, prompts.yaml)
- **S√©curit√©** : Ne jamais exposer de cl√©s API dans le code
- **Versioning** : Utiliser bump2version pour les releases

## üñ•Ô∏è Sp√©cificit√©s environnement Windows/PowerShell

### ‚ùå Erreurs courantes et solutions

#### 1. **Commande `make` non reconnue**
```powershell
# ‚ùå Probl√®me
make help  # "make: The term 'make' is not recognized"

# ‚úÖ Solutions
# Option 1: Scripts PowerShell √©quivalents
.\scripts\bump_version.ps1
.\scripts\run_quick_start.py

# Option 2: Installation make pour Windows
choco install make  # Avec Chocolatey
# ou utiliser WSL si disponible
```

#### 2. **Commandes Linux sous PowerShell**
```powershell
# ‚ùå √âviter
ls -la | grep pattern    # Commandes Unix non reconnues
find . -name "*.py"

# ‚úÖ Utiliser les √©quivalents PowerShell
Get-ChildItem -Force | Where-Object {$_.Name -like "*pattern*"}
Get-ChildItem -Recurse -Filter "*.py"
```

#### 3. **Gestion des chemins**
```powershell
# ‚ùå Probl√®me avec les chemins
cat /path/to/file        # Style Unix

# ‚úÖ PowerShell natif
Get-Content .\path\to\file
Get-Content "C:\Full\Path\To\File"
```

#### 4. **Commits Git multi-lignes**
```bash
# ‚ùå √âviter les messages multi-lignes via tool
git commit -m "Ligne 1
Ligne 2"  # Cause des erreurs dans les outils

# ‚úÖ Messages simples ou via editor
git commit -m "Description courte et claire"
git commit  # Ouvre l'√©diteur pour messages longs
```

### üõ†Ô∏è Outils et commandes recommand√©s

#### **Versioning automatique**
```powershell
# Commandes make recommand√©es (cross-platform)
make bump-patch   # Version patch (1.0.0 -> 1.0.1)
make bump-minor   # Version minor (1.0.0 -> 1.1.0)  
make bump-major   # Version major (1.0.0 -> 2.0.0)

# Script PowerShell alternatif
.\scripts\bump_version.ps1 patch   # Avec confirmation

# Commande directe bump2version
bump2version patch
```

#### **Gestion de projets Python**
```powershell
# Installation avec make (recommand√©)
make install      # Production seulement
make install-dev  # Dev + production

# Installation manuelle
pip install -r requirements.txt
pip install -r requirements-dev.txt
pip install -e .  # Mode d√©veloppement

# V√©rifications
python -c "import brainstorm_ai; print(brainstorm_ai.__version__)"
```

#### **Diagnostic et d√©pannage**
```powershell
# √âtat Git robuste
git status --porcelain  # Sortie scriptable
git log --oneline -5 | cat  # √âviter le pager

# Variables d'environnement
$env:OPENAI_API_KEY      # V√©rifier sans exposer
Get-Content .env | Select-String "OPENAI"  # V√©rifier config
```

### ‚ö° Scripts et automatisation

#### **bump2version - S√©curit√©s int√©gr√©es**
- ‚úÖ V√©rification r√©pertoire Git propre
- ‚úÖ Validation fichiers synchronis√©s  
- ‚úÖ Commits et tags automatiques
- ‚úÖ Mode dry-run pour tests

#### **Scripts PowerShell robustes**
```powershell
# Gestion d'erreur exemple
try {
    $null = Get-Command bump2version -ErrorAction Stop
} catch {
    Write-Host "Installation bump2version..." -ForegroundColor Yellow
    pip install bump2version
}
```

## üîß Commandes et outils

### üèóÔ∏è Outils de d√©veloppement configur√©s

#### **Qualit√© de code avec ruff**
```bash
# Commandes make (recommand√©es)
make check          # Linting + formatage automatique

# Commandes directes ruff
ruff check src main.py scripts     # V√©rification
ruff format src main.py scripts    # Formatage
```

#### **Build et nettoyage**
```bash
make clean          # Supprime fichiers temporaires
make run            # Lance main.py
```

### ‚úÖ Privil√©gier GitHub CLI (gh) dans Cursor
**Probl√®me identifi√©** : Les commandes `git` standard causent parfois des suspensions dans l'IDE Cursor

**Utiliser en priorit√© :**
```bash
# V√©rifications repository
gh repo view --json name,pushedAt,defaultBranchRef
gh api repos/OWNER/REPO/commits --jq '.[0:3]'
gh run list --limit 5

# Navigation
gh browse --no-browser
```

**√âviter dans Cursor :**
```bash
git log --oneline    # Peut rester en suspend
git status           # Parfois bloqu√©
```

### üìù Git workflow standard
```bash
# Workflow basique
git add .
git commit -m "Description claire des changements"
git push origin main
```

## üß† Sp√©cificit√©s Brainstorm AI

### Architecture des agents
- **creative.py** : G√©n√©ration d'id√©es innovantes
- **critic.py** : Analyse critique constructive  
- **revision.py** : Am√©lioration et reformulation
- **score.py** : √âvaluation quantitative
- **synthesis.py** : Synth√®se et s√©lection des meilleures id√©es
- **application.py** : Plans de mise en ≈ìuvre

### Fichiers importants
- **main.py** : Point d'entr√©e principal
- **scripts/run_quick_start.py** : Assistant interactif de d√©marrage
- **config/config.yaml** : Configuration syst√®me (mod√®les, cycles, etc.)
- **config/prompts.yaml** : Templates des prompts pour chaque agent
- **src/brainstorm_ai/core/loop_manager.py** : Orchestration du brainstorming
- **src/brainstorm_ai/core/gpt.py** : Interface OpenAI
- **Makefile** : Commandes de d√©veloppement
- **pyproject.toml** : Configuration du projet et outils

### ‚ö†Ô∏è Pr√©cautions importantes
- **Tests co√ªteux** : √âviter d'ex√©cuter `main.py` √† r√©p√©tition (consomme des tokens OpenAI)
- **Cl√©s API** : S'assurer que `OPENAI_API_KEY` est d√©finie mais non expos√©e
- **Prompts** : Tester les modifications de prompts avec parcimonie

## ‚úÖ Checklist avant commit

### Fonctionnalit√©
- [ ] Code test√© manuellement et fonctionnel
- [ ] Pas de cl√©s API hardcod√©es
- [ ] Configuration YAML valide
- [ ] Imports r√©solus correctement

### Qualit√© code
- [ ] `make check` pass√© (ruff linting + formatage)
- [ ] Messages de commit descriptifs avec emojis
- [ ] Documentation mise √† jour si n√©cessaire

### D√©ploiement
- [ ] V√©rification avec `gh` si possible
- [ ] Push vers la bonne branche
- [ ] Version bumped si n√©cessaire (`make bump-patch`)

## üöÄ Bonnes pratiques de d√©veloppement

### Messages de commit
- **Fonctionnalit√©** : "‚ú® Ajout [description]"
- **Correction** : "üêõ Fix [probl√®me r√©solu]"
- **Am√©lioration** : "‚ö° Am√©lioration [composant]"
- **Documentation** : "üìñ Docs [section mise √† jour]"
- **Tests** : "üß™ Tests [couverture ajout√©e]"
- **Configuration** : "‚öôÔ∏è Config [param√®tre modifi√©]"

### Structure de d√©veloppement
1. **Comprendre** le besoin/probl√®me
2. **Analyser** l'architecture existante  
3. **Impl√©menter** la solution
4. **Tester** les modifications
5. **Documenter** si n√©cessaire
6. **Commiter** et **pusher**

## üé® Style et conventions

### Code Python
- Suivre PEP 8 autant que possible
- Noms de variables explicites
- Docstrings pour les fonctions importantes
- Gestion d'erreurs appropri√©e

### Organisation
- Agents dans `src/brainstorm_ai/agents/`
- Logique core dans `src/brainstorm_ai/core/`
- Tests dans `tests/` avec structure miroir
- Configuration dans `config/`
- Documentation dans `docs/`

---

*Ces r√®gles sont √©volutives et peuvent √™tre adapt√©es selon les besoins du projet.* 