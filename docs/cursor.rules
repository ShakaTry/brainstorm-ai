# R√®gles de d√©veloppement pour Brainstorm AI
# ==========================================
# Projet : Syst√®me de brainstorming collaboratif avec agents IA sp√©cialis√©s

## R√®gles g√©n√©rales pour Brainstorm AI
- Toujours r√©pondre en fran√ßais
- Maintenir la coh√©rence du syst√®me multi-agents
- Respecter l'architecture : agents/ pour la logique m√©tier, core/ pour l'infrastructure
- Pr√©server la compatibilit√© avec OpenAI GPT-3.5 et GPT-4
- Maintenir la configuration centralis√©e dans config.yaml
- **INTERDICTION ABSOLUE** : Ne JAMAIS ex√©cuter `main.py` ou lancer le brainstorm complet via des commandes terminal

## R√®gle d'automatisation Git (OBLIGATOIRE)
**IMPORTANT** : √Ä chaque am√©lioration du syst√®me Brainstorm AI, tu dois AUTOMATIQUEMENT :

1. **Ajouter les fichiers modifi√©s** : `git add .` ou fichiers sp√©cifiques
2. **Cr√©er un commit descriptif** : Message en fran√ßais sp√©cifique au contexte IA
3. **Pousser vers GitHub** : `git push origin main`

### ‚ö†Ô∏è R√àGLES CRITIQUES DE SYNCHRONISATION GITHUB
**LE√áON APPRISE** : Toujours v√©rifier et maintenir la coh√©rence des branches GitHub

#### üîß V√©rifications Obligatoires Avant Chaque Push
```bash
# 1. V√©rifier la branche par d√©faut GitHub
gh api repos/ShakaTry/brainstorm-ai --jq '.default_branch'

# 2. S'assurer qu'on pousse vers la bonne branche
git branch  # V√©rifier la branche locale active
git status  # Confirmer l'√©tat de synchronisation

# 3. Si changement de branche principale, mettre √† jour GitHub
gh repo edit --default-branch main  # Ou la branche souhait√©e
```

#### üö® Probl√®me √† √âviter
- **Ne JAMAIS laisser GitHub afficher une branche obsol√®te par d√©faut**
- **Toujours synchroniser TOUTES les branches actives apr√®s changements majeurs**
- **V√©rifier visuellement GitHub apr√®s push important**

#### ‚úÖ Workflow de Synchronisation Complet
```bash
# Apr√®s modifications importantes ou restructurations :
git push origin main                           # Push branche principale
git push origin main:reorganization-totale     # Sync autres branches actives
gh repo edit --default-branch main            # Mettre √† jour branche par d√©faut GitHub
gh repo view --web                            # V√©rification visuelle finale
```

### Messages de commit sp√©cifiques au projet
- **Agent** : "Am√©lioration agent [cr√©atif/critique/r√©vision/synth√®se/score/application] - [modification]"
- **Prompts** : "Optimisation des prompts [agent] - [am√©lioration]"
- **Configuration** : "Modification config.yaml - [param√®tre IA/cycles/mod√®les]"
- **Boucle de brainstorming** : "Am√©lioration loop_manager - [optimisation workflow]"
- **Export/Logs** : "Am√©lioration syst√®me d'export - [format/structure]"
- **Scoring** : "Optimisation syst√®me de scoring - [crit√®res/validation]"
- **Gestion tokens** : "Optimisation consommation tokens - [strat√©gie]"
- **Tests agents** : "Tests pour agent [nom] - [couverture]"

### Exemples de workflow Brainstorm AI
```bash
# Modification d'un agent
git add agents/agent_creatif.py
git commit -m "Am√©lioration agent cr√©atif - prompts plus innovants"
git push origin main

# Optimisation de la boucle de brainstorming
git add core/loop_manager.py
git commit -m "Am√©lioration loop_manager - gestion intelligente historique"
git push origin main

# Configuration des mod√®les IA
git add config.yaml
git commit -m "Modification config.yaml - passage GPT-4 pour agent synth√®se"
git push origin main
```

## R√®gles sp√©cifiques au syst√®me Brainstorm AI

### Architecture des agents IA
- **agents/agent_creatif.py** : G√©n√©ration d'id√©es, temp√©rature √©lev√©e (0.9)
- **agents/agent_critique.py** : Analyse critique, temp√©rature basse (0.4)
- **agents/agent_revision.py** : Reformulation, temp√©rature mod√©r√©e (0.6)
- **agents/agent_synthese.py** : Synth√®se finale, temp√©rature √©quilibr√©e (0.5)
- **agents/agent_score.py** : √âvaluation quantitative, temp√©rature tr√®s basse (0.2)
- **agents/agent_application.py** : Plans d'action, temp√©rature mod√©r√©e (0.6)

### Fichiers critiques √† surveiller
- **config.yaml** : Configuration centrale (mod√®les, temp√©ratures, cycles)
- **core/loop_manager.py** : Orchestration des cycles de brainstorming
- **core/config.py** : Gestionnaire de configuration
- **core/gpt.py** : Interface OpenAI avec gestion des tokens
- **main.py** : Point d'entr√©e avec confirmation utilisateur

### Optimisations sp√©cifiques IA
- **Gestion contexte** : Limiter l'historique pour optimiser les tokens
- **Strat√©gies d'extraction** : M√©thodes robustes pour extraire les top id√©es
- **Validation scoring** : Fallback intelligent pour les scores malform√©s
- **D√©tection redondance** : √âviter la r√©p√©tition d'id√©es similaires
- **Retry avec backoff** : Gestion des erreurs API OpenAI

### Tests sp√©cialis√©s
- **tests/test_agent_*.py** : Tests unitaires par agent
- **tests/test_loop_manager.py** : Tests des cycles de brainstorming
- **tests/test_exporter.py** : Tests d'export multi-format
- V√©rifier les prompts et les r√©ponses IA dans les tests

## Checklist sp√©cifique Brainstorm AI

### Avant chaque commit/push
- [ ] **Agents IA** : Prompts test√©s et r√©ponses coh√©rentes
- [ ] **Configuration** : config.yaml valide (YAML syntax)
- [ ] **Tokens** : Optimisation consommation OpenAI v√©rifi√©e
- [ ] **Cycles** : Workflow de brainstorming fonctionnel
- [ ] **Export** : Formats YAML/JSON/Markdown g√©n√©r√©s correctement
- [ ] **Scoring** : Validation des scores (impact, faisabilit√©, originalit√©, clart√©)
- [ ] **Historique** : Gestion m√©moire et contexte optimis√©e
- [ ] **Variables environnement** : OPENAI_API_KEY non expos√©e dans le code

### ‚ö†Ô∏è V√©rifications GitHub (CRITIQUE)
- [ ] **Branche par d√©faut** : `gh api repos/ShakaTry/brainstorm-ai --jq '.default_branch'` = main
- [ ] **Synchronisation** : Toutes les branches actives push√©es
- [ ] **V√©rification visuelle** : `gh repo view --web` apr√®s push important
- [ ] **Coh√©rence branches** : Pas de d√©calage entre local et remote

### Tests critiques √† valider
- [ ] **main.py** s'ex√©cute sans erreur
- [ ] **Confirmation utilisateur** fonctionne
- [ ] **Statistiques tokens** s'affichent correctement
- [ ] **Logs** sauvegard√©s dans le bon format
- [ ] **Agents** r√©pondent dans le bon r√¥le (cr√©atif vs analytique)

## Commandes INTERDITES pour Brainstorm AI
**ATTENTION** : Ne JAMAIS ex√©cuter ces commandes :
- `python main.py` - Lance le brainstorm complet avec consommation de tokens OpenAI
- `python main.py --any-flags` - Toute variante d'ex√©cution du script principal
- Ex√©cutions directes du syst√®me de brainstorming en production

**Commandes AUTORIS√âES pour les tests** :
- `python demo_progression.py` - D√©monstration sans API
- `python -m pytest tests/` - Tests unitaires
- `python test_config.py` - Tests de configuration
- Scripts utilitaires sans appels API OpenAI

## Exceptions pour Brainstorm AI
Ne PAS faire de commit/push automatique dans ces cas :
- **Tests exp√©rimentaux** de nouveaux prompts
- **Modifications des cl√©s API** (s√©curit√©)
- **Refactoring majeur** de l'architecture multi-agents
- **Changements breaking** dans config.yaml

## Priorit√©s de d√©veloppement Brainstorm AI
1. **Performance IA** : Optimiser les prompts et la consommation tokens
2. **Qualit√© brainstorming** : Am√©liorer la pertinence des id√©es g√©n√©r√©es
3. **Robustesse** : Gestion d'erreurs API et validation des r√©ponses
4. **Exp√©rience utilisateur** : Interface claire avec emojis et progression
5. **Extensibilit√©** : Faciliter l'ajout de nouveaux agents ou crit√®res

**R√àGLE D'OR : Chaque am√©lioration du syst√®me de brainstorming doit √™tre imm√©diatement commit√©e et push√©e !** 