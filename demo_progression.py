#!/usr/bin/env python3
"""
Script de d√©monstration du syst√®me de progression visuelle.
Simule un brainstorm complet pour montrer l'affichage de progression.
"""

import time
import random
from core.progress_tracker import ProgressTracker
from core.config import config

def simulate_gpt_call(min_delay=0.5, max_delay=2.0):
    """Simule un appel GPT avec un d√©lai al√©atoire."""
    delay = random.uniform(min_delay, max_delay)
    time.sleep(delay)
    return f"R√©sultat simul√© (d√©lai: {delay:.1f}s)"

def demo_brainstorm_progression():
    """D√©monstration compl√®te du syst√®me de progression."""
    
    print("üöÄ === D√âMONSTRATION DU SYST√àME DE PROGRESSION ===\n")
    
    # Configuration de d√©monstration
    cycles = 2  # R√©duire pour la d√©mo
    top_ideas_count = 2  # R√©duire pour la d√©mo
    
    # Initialiser le tracker
    progress_tracker = ProgressTracker(cycles, top_ideas_count)
    progress_tracker.start_brainstorm()
    
    # Simuler les cycles de brainstorming
    for cycle_num in range(1, cycles + 1):
        progress_tracker.start_cycle(cycle_num)
        
        # Simuler chaque √©tape du cycle
        for step_num in range(6):  # 6 √©tapes par cycle
            progress_tracker.start_cycle_step(step_num)
            simulate_gpt_call(0.3, 1.0)  # Plus rapide pour la d√©mo
            progress_tracker.complete_cycle_step(step_num)
    
    # Simuler la synth√®se
    progress_tracker.start_synthesis()
    simulate_gpt_call(1.0, 2.0)
    progress_tracker.complete_synthesis()
    
    # Simuler le traitement des id√©es
    progress_tracker.start_idea_processing(top_ideas_count)
    
    idees_demo = [
        "Plateforme collaborative de co-cr√©ation urbaine avec IA distribu√©e",
        "R√©seau de capteurs citoyens pour la gouvernance participative"
    ]
    
    for idx, idee in enumerate(idees_demo, 1):
        progress_tracker.start_idea(idx, idee)
        
        # Simuler les 4 √©tapes du traitement d'id√©e
        for step_num in range(4):
            progress_tracker.start_idea_step(step_num)
            simulate_gpt_call(0.5, 1.5)
            progress_tracker.complete_idea_step(step_num)
    
    # Simuler l'export
    progress_tracker.start_export()
    time.sleep(0.5)
    progress_tracker.complete_export()
    
    # Terminer
    progress_tracker.finish()
    
    print("\n\nüéâ D√©monstration termin√©e !")
    print("‚ú® Le syst√®me de progression est maintenant int√©gr√© dans votre brainstorm.")
    print("\nüìù Fonctionnalit√©s ajout√©es :")
    print("   ‚Ä¢ Barre de progression en temps r√©el")
    print("   ‚Ä¢ Indicateurs visuels pour chaque √©tape")
    print("   ‚Ä¢ Suivi du cycle et de la phase en cours")
    print("   ‚Ä¢ Pourcentage d'avancement global")
    print("   ‚Ä¢ √âmojis pour une meilleure lisibilit√©")

def show_configuration_options():
    """Affiche les options de configuration disponibles."""
    print("\n‚öôÔ∏è === OPTIONS DE CONFIGURATION ===")
    print("\nDans votre config.yaml, vous pouvez personnaliser :")
    print("‚Ä¢ display.show_progress: true/false - Activer/d√©sactiver la progression")
    print("‚Ä¢ display.use_emojis: true/false - Activer/d√©sactiver les emojis")
    print("‚Ä¢ display.emojis.* - Personnaliser les emojis utilis√©s")
    
    print(f"\nüìä Configuration actuelle :")
    print(f"   ‚Ä¢ Progression activ√©e: {config.get('display.show_progress', True)}")
    print(f"   ‚Ä¢ Emojis activ√©s: {config.get('display.use_emojis', True)}")
    print(f"   ‚Ä¢ Usage des tokens affich√©: {config.show_token_usage}")

if __name__ == "__main__":
    try:
        demo_brainstorm_progression()
        show_configuration_options()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è D√©monstration interrompue par l'utilisateur.")
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la d√©monstration : {e}") 