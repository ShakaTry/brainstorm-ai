#!/usr/bin/env python3
"""
Script de test pour valider la corr√©lation entre configuration et logs.
Teste sp√©cifiquement les corrections apport√©es au syst√®me d'extraction des id√©es.
"""

from brainstorm_ai.core.config import config
from brainstorm_ai.core.loop_manager import extract_top_ideas_robust


def test_config_correlation():
    """Test de la corr√©lation entre configuration et comportement du syst√®me."""
    print("üîß === TEST DE CORR√âLATION CONFIG <-> LOGS ===\n")

    # Test 1: V√©rifier la configuration actuelle
    print("üìã 1. CONFIGURATION ACTUELLE")
    print(f"   ‚Ä¢ Cycles configur√©s: {config.cycles}")
    print(f"   ‚Ä¢ Top ideas count: {config.top_ideas_count}")
    print(f"   ‚Ä¢ Strat√©gies d'extraction: {config.get_idea_extraction_strategies()}")

    # Test 2: Tester l'extraction d'id√©es avec diff√©rents counts
    print("\nüîç 2. TEST D'EXTRACTION D'ID√âES")

    # Simuler une synth√®se avec des id√©es num√©rot√©es
    synthese_test = """Voici les meilleures id√©es :

1. Premi√®re id√©e innovante avec description d√©taill√©e
2. Deuxi√®me id√©e cr√©ative avec plan d'action
3. Troisi√®me id√©e r√©volutionnaire avec impact majeur

Ces id√©es repr√©sentent les solutions les plus prometteuses."""

    # Tester avec count=1 (comme dans la config actuelle)
    idees_1 = extract_top_ideas_robust(synthese_test, 1)
    print(f"   ‚Ä¢ Extraction avec count=1: {len(idees_1)} id√©es trouv√©es")
    for i, idee in enumerate(idees_1, 1):
        print(f"     {i}. {idee[:60]}...")

    # Tester avec count=3
    idees_3 = extract_top_ideas_robust(synthese_test, 3)
    print(f"   ‚Ä¢ Extraction avec count=3: {len(idees_3)} id√©es trouv√©es")
    for i, idee in enumerate(idees_3, 1):
        print(f"     {i}. {idee[:60]}...")

    # Test 3: Validation du regex corrig√©
    print("\nüß™ 3. VALIDATION DU REGEX CORRIG√â")
    test_patterns = [(1, r"^\s*1\.\s*(.+)$"), (3, r"^\s*[1-3]\.\s*(.+)$")]

    for count, expected_pattern in test_patterns:
        # Reconstituer le pattern comme dans le code
        if count == 1:
            actual_pattern = r"^\s*1\.\s*(.+)$"
        else:
            actual_pattern = rf"^\s*[1-{count}]\.\s*(.+)$"

        match_status = "‚úÖ" if actual_pattern == expected_pattern else "‚ùå"
        print(f"   ‚Ä¢ count={count}: {match_status} Pattern: {actual_pattern}")

    # Test 4: Test du prompt de synth√®se avec count dynamique
    print("\nüìù 4. TEST DU PROMPT DE SYNTH√àSE")

    # Mock des id√©es r√©vis√©es
    idees_test = [
        "Id√©e A: Solution innovante pour probl√®me X",
        "Id√©e B: Approche cr√©ative pour d√©fi Y",
        "Id√©e C: M√©thode r√©volutionnaire pour objectif Z",
    ]

    print("   ‚Ä¢ Test avec diff√©rents counts:")
    for test_count in [1, 2, 3]:
        print(f"     - count={test_count}: Appel prompt_synthese() configur√©")
        # Note: On ne fait pas l'appel r√©el pour √©viter les co√ªts API
        print(f"       ‚îî‚îÄ Prompt devrait demander {test_count} id√©e(s)")

    # Test 5: V√©rifier la coh√©rence de configuration
    print("\n‚öôÔ∏è 5. COH√âRENCE DE CONFIGURATION")

    coherence_issues = []

    # V√©rifier que top_ideas_count est dans une plage raisonnable
    if config.top_ideas_count < 1:
        coherence_issues.append("top_ideas_count ne peut pas √™tre < 1")
    elif config.top_ideas_count > 10:
        coherence_issues.append("top_ideas_count > 10 peut √™tre excessif")

    # V√©rifier que cycles > 0
    if config.cycles < 1:
        coherence_issues.append("cycles ne peut pas √™tre < 1")

    # V√©rifier les formats d'export
    formats_actifs = []
    for fmt in ["yaml", "json", "markdown"]:
        if config.should_export_format(fmt):
            formats_actifs.append(fmt)

    if not formats_actifs:
        coherence_issues.append("Aucun format d'export activ√©")

    if coherence_issues:
        print("   ‚ùå Probl√®mes d√©tect√©s:")
        for issue in coherence_issues:
            print(f"     ‚Ä¢ {issue}")
    else:
        print("   ‚úÖ Configuration coh√©rente")

    print(f"\n   ‚Ä¢ Formats d'export actifs: {', '.join(formats_actifs)}")
    print(
        f"   ‚Ä¢ Sauvegarde id√©es individuelles: {config.get('export.save_individual_ideas', True)}"
    )

    # R√©sum√© final
    print("\nüìä === R√âSUM√â DU TEST ===")
    print("‚úÖ Extraction d'id√©es corrig√©e (regex count=1 fonctionnel)")
    print("‚úÖ Prompt de synth√®se param√©tr√© avec count dynamique")
    print(f"‚úÖ Configuration actuelle: {config.cycles} cycle(s), {config.top_ideas_count} id√©e(s)")

    if not coherence_issues:
        print("‚úÖ Corr√©lation config <-> comportement: VALIDE")
    else:
        print("‚ö†Ô∏è  Quelques probl√®mes de coh√©rence d√©tect√©s")

    print(
        f"\nüéØ Votre prochain brainstorm devrait maintenant g√©n√©rer exactement {config.top_ideas_count} id√©e(s) comme configur√© !"
    )


if __name__ == "__main__":
    test_config_correlation()
